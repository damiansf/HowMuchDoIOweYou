{"version":3,"sources":["../src/getStateFromCookies.js"],"names":["safeGetCookie","getCookie","cookieName","JSON","parse","_","getStateFromPath","path","valueFromCookie","pathSplit","split","reverse","reduce","finalPathState","currPathKey","getStateFromCookies","preloadedState","paths","pathStates","Object","keys","map","pathConfig","name","finalState","pathState"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;;AAMA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,UAAZ,EAA2B;AAC7C,QAAI;AACA,eAAOC,KAAKC,KAAL,CAAWH,UAAUC,UAAV,CAAX,CAAP;AACH,KAFD,CAEE,OAAOG,CAAP,EAAU;AACR,eAAOJ,UAAUC,UAAV,CAAP;AACH;AACJ,CAND;;AAQA;;;;;;AAMA,IAAMI,mBAAmB,SAAnBA,gBAAmB,CAACC,IAAD,EAAOC,eAAP,EAA2B;AAChD,QAAMC,YAAYF,KAAKG,KAAL,CAAW,GAAX,CAAlB;AACA,WAAOD,UAAUE,OAAV,GACFC,MADE,CACK,UAACC,cAAD,EAAiBC,WAAjB;AAAA,mCACAA,WADA,EACcD,cADd;AAAA,KADL,EAEsCL,eAFtC,CAAP;AAGH,CALD;;AAOA;;;;;;;AAOA,IAAMO,sBAAsB,SAAtBA,mBAAsB,GAIvB;AAAA,QAHDC,cAGC,uEAHgB,EAGhB;AAAA,QAFDC,KAEC;AAAA,QADDhB,SACC;;AACD,QAAMiB,aAAaC,OAAOC,IAAP,CAAYH,KAAZ,EAAmBI,GAAnB,CAAuB,UAACd,IAAD,EAAU;AAChD,YAAMe,aAAaL,MAAMV,IAAN,CAAnB;AACA,YAAMC,kBAAkBR,cAAcC,SAAd,EAAyBqB,WAAWC,IAApC,CAAxB;AACA,eAAOjB,iBAAiBC,IAAjB,EAAuBC,eAAvB,CAAP;AACH,KAJkB,CAAnB;AAKA,WAAOU,WACFN,MADE,CACK,UAACY,UAAD,EAAaC,SAAb;AAAA,4BAAiCD,UAAjC,EAAgDC,SAAhD;AAAA,KADL,EACmET,cADnE,CAAP;AAEH,CAZD;;kBAceD,mB","file":"getStateFromCookies.js","sourcesContent":["import { getCookie as getBrowserCookie } from './cookieApi';\n\n/**\n * safely get cookies\n * @param {Function} getCookie\n * @param {String} cookieName\n * @return {any} cookieValue\n */\nconst safeGetCookie = (getCookie, cookieName) => {\n    try {\n        return JSON.parse(getCookie(cookieName));\n    } catch (_) {\n        return getCookie(cookieName);\n    }\n};\n\n/**\n * get State Object from Path String\n * @param {String} path\n * @param {any} valueFromCookie\n * @return {Object} new state\n */\nconst getStateFromPath = (path, valueFromCookie) => {\n    const pathSplit = path.split('.');\n    return pathSplit.reverse()\n        .reduce((finalPathState, currPathKey) =>\n            ({ [currPathKey]: finalPathState }), valueFromCookie);\n};\n\n/**\n * read browser cookie into state\n * @param {Object} preloaded state\n * @param {Object} paths\n * @param {Object} get Cookie implementation\n * @return {Object} new state\n */\nconst getStateFromCookies = (\n    preloadedState = {},\n    paths,\n    getCookie = getBrowserCookie\n) => {\n    const pathStates = Object.keys(paths).map((path) => {\n        const pathConfig = paths[path];\n        const valueFromCookie = safeGetCookie(getCookie, pathConfig.name);\n        return getStateFromPath(path, valueFromCookie);\n    });\n    return pathStates\n        .reduce((finalState, pathState) => ({ ...finalState, ...pathState }), preloadedState);\n};\n\nexport default getStateFromCookies;\n"]}