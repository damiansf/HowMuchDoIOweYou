{"ast":null,"code":"var _jsxFileName = \"/Users/damiansandhu-franceschi/Desktop/HowMuchDoIOweYou/src/containers/manageDataContainer.js\";\nimport { ManageData } from \"../components/ManageData/index\";\nimport { clearData, addUser, addDebt, addDebtInstance } from \"../actions/actionDefs\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass ManageDataContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n    this.uploadData = this.uploadData.bind(this);\n  }\n\n  uploadData(e) {\n    let file = e.target.files[0];\n\n    if (!file.type.includes(\"json\")) {\n      alert(\"Invalid file type, only accept json files\");\n      return;\n    }\n\n    let reader = new FileReader();\n\n    reader.onload = (() => {\n      return e => {\n        try {\n          let obj = JSON.parse(e.target.result);\n          obj.emails.forEach(email => {\n            if (!this.props.emails.includes(email)) {\n              this.props.addUser({\n                firstName: obj.users[email].firstName,\n                lastName: obj.users[email].lastName,\n                email: obj.users[email].email\n              });\n            }\n          });\n          obj.debtList.forEach(debt => {\n            if (!this.props.debtList.includes(debt)) {\n              this.props.addDebtInstance({\n                debts: obj.debtMap[debt].debts,\n                key: debt\n              });\n            } else {\n              obj.debtMap[debt].debts.forEach(debtItem => {\n                let existing = false;\n                this.props.debtMap[debt].debts.forEach(existingDebtItem => {\n                  if (existingDebtItem.timeStamp === debtItem.timeStamp) {\n                    existing = true;\n                  }\n                });\n\n                if (!existing) {\n                  this.props.addDebt({\n                    userOne: debtItem.userIDOne,\n                    userTwo: debtItem.userIDTwo,\n                    amount: debtItem.amount * -1,\n                    notes: debtItem.notes\n                  });\n                }\n              });\n            }\n          });\n          alert(\"Data Uploaded\");\n        } catch (error) {\n          alert(\"Error parsing json: \" + error);\n        }\n      };\n    })(file);\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      return React.createElement(ManageData, {\n        clearData: this.props.clearData,\n        uploadData: this.uploadData,\n        data: URL.createObjectURL(new Blob([JSON.stringify({\n          users: this.props.users,\n          emails: this.props.emails,\n          debtList: this.props.debtList,\n          debtMap: this.props.debtMap\n        })], {\n          type: \"application/json\"\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"File API's not available\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  emails: state.emails,\n  debtList: state.debtList,\n  debtMap: state.debtMap\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clearData: () => dispatch(clearData()),\n  addUser: data => dispatch(addUser(data)),\n  addDebt: data => dispatch(addDebt(data)),\n  addDebtInstance: data => dispatch(addDebtInstance(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDataContainer);","map":{"version":3,"sources":["/Users/damiansandhu-franceschi/Desktop/HowMuchDoIOweYou/src/containers/manageDataContainer.js"],"names":["ManageData","clearData","addUser","addDebt","addDebtInstance","React","connect","ManageDataContainer","Component","constructor","state","uploadData","bind","e","file","target","files","type","includes","alert","reader","FileReader","onload","obj","JSON","parse","result","emails","forEach","email","props","firstName","users","lastName","debtList","debt","debts","debtMap","key","debtItem","existing","existingDebtItem","timeStamp","userOne","userIDOne","userTwo","userIDTwo","amount","notes","error","readAsText","render","window","File","FileList","Blob","URL","createObjectURL","stringify","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import { ManageData } from \"../components/ManageData/index\";\nimport {\n  clearData,\n  addUser,\n  addDebt,\n  addDebtInstance\n} from \"../actions/actionDefs\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass ManageDataContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {};\n\n    this.uploadData = this.uploadData.bind(this);\n  }\n\n  uploadData(e) {\n    let file = e.target.files[0];\n\n    if (!file.type.includes(\"json\")) {\n      alert(\"Invalid file type, only accept json files\");\n      return;\n    }\n\n    let reader = new FileReader();\n\n    reader.onload = (() => {\n      return e => {\n        try {\n          let obj = JSON.parse(e.target.result);\n\n          obj.emails.forEach(email => {\n            if (!this.props.emails.includes(email)) {\n              this.props.addUser({\n                firstName: obj.users[email].firstName,\n                lastName: obj.users[email].lastName,\n                email: obj.users[email].email\n              });\n            }\n          });\n\n          obj.debtList.forEach(debt => {\n            if (!this.props.debtList.includes(debt)) {\n              this.props.addDebtInstance({\n                debts: obj.debtMap[debt].debts,\n                key: debt\n              });\n            } else {\n              obj.debtMap[debt].debts.forEach(debtItem => {\n                let existing = false;\n                this.props.debtMap[debt].debts.forEach(existingDebtItem => {\n                  if (existingDebtItem.timeStamp === debtItem.timeStamp) {\n                    existing = true;\n                  }\n                });\n                if (!existing) {\n                  this.props.addDebt({\n                    userOne: debtItem.userIDOne,\n                    userTwo: debtItem.userIDTwo,\n                    amount: debtItem.amount * -1,\n                    notes: debtItem.notes\n                  });\n                }\n              });\n            }\n          });\n          alert(\"Data Uploaded\");\n        } catch (error) {\n          alert(\"Error parsing json: \" + error);\n        }\n      };\n    })(file);\n    reader.readAsText(file);\n  }\n\n  render() {\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      return (\n        <ManageData\n          clearData={this.props.clearData}\n          uploadData={this.uploadData}\n          data={URL.createObjectURL(\n            new Blob(\n              [\n                JSON.stringify({\n                  users: this.props.users,\n                  emails: this.props.emails,\n                  debtList: this.props.debtList,\n                  debtMap: this.props.debtMap\n                })\n              ],\n              {\n                type: \"application/json\"\n              }\n            )\n          )}\n        />\n      );\n    } else {\n      return <span>File API's not available</span>;\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  users: state.users,\n  emails: state.emails,\n  debtList: state.debtList,\n  debtMap: state.debtMap\n});\n\nconst mapDispatchToProps = dispatch => ({\n  clearData: () => dispatch(clearData()),\n  addUser: data => dispatch(addUser(data)),\n  addDebt: data => dispatch(addDebt(data)),\n  addDebtInstance: data => dispatch(addDebtInstance(data))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ManageDataContainer);\n"]},"metadata":{},"sourceType":"module"}