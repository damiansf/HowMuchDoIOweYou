{"ast":null,"code":"import _objectSpread from \"/Users/damiansandhu-franceschi/Desktop/HowMuchDoIOweYou/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionConst from \"../actions/action-constants\";\nimport { checkForDebtInstance } from \"../utils\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionConst.addDebtInstance:\n      {\n        return _objectSpread({}, state, {\n          debtList: [...state.debtList, action.payload.key],\n          debtMap: _objectSpread({}, state.debtMap, {\n            [action.payload.key]: {\n              debts: action.payload.debts\n            }\n          })\n        });\n      }\n\n    case actionConst.deleteDebt:\n      {\n        let id = action.payload.userIDOne + action.payload.userIDTwo;\n        return _objectSpread({}, state, {\n          debtMap: _objectSpread({}, state.debtMap, {\n            [id]: {\n              debts: [...state.debtMap[id].debts.slice(0, action.payload.index), ...state.debtMap[id].debts.slice(action.payload.index + 1)]\n            }\n          })\n        });\n      }\n\n    case actionConst.deleteUser:\n      {\n        let newUserMap = {};\n        state.emails.forEach(email => {\n          if (email !== action.payload.email) {\n            newUserMap[email] = state.users[email];\n          }\n        });\n        return _objectSpread({}, state, {\n          emails: state.emails.filter(email => email !== action.payload.email),\n          users: newUserMap\n        });\n      }\n\n    case actionConst.deleteDebtMap:\n      {\n        let id = action.payload.userIDOne + action.payload.userIDTwo;\n        let newDebtMap = {};\n        state.debtList.forEach(debt => {\n          if (debt !== id) {\n            newDebtMap[debt] = state.debtMap[debt];\n          }\n        });\n        return _objectSpread({}, state, {\n          debtList: state.debtList.filter(debt => debt !== id),\n          debtMap: newDebtMap\n        });\n      }\n\n    case actionConst.clearData:\n      {\n        return {\n          emails: [],\n          users: {},\n          debtMap: {},\n          debtList: []\n        };\n      }\n\n    case actionConst.addUser:\n      {\n        return _objectSpread({}, state, {\n          emails: [...state.emails, action.email],\n          users: _objectSpread({}, state.users, {\n            [action.email]: action.payload\n          })\n        });\n      }\n\n    case actionConst.addDebt:\n      {\n        let id = action.payload.userIDOne + action.payload.userIDTwo;\n\n        if (checkForDebtInstance(state.debtList, action.payload.userIDOne, action.payload.userIDTwo)) {\n          return _objectSpread({}, state, {\n            debtMap: _objectSpread({}, state.debtMap, {\n              [id]: {\n                debts: [...state.debtMap[id].debts, action.payload]\n              }\n            })\n          });\n        } else {\n          return _objectSpread({}, state, {\n            debtList: [...state.debtList, id],\n            debtMap: _objectSpread({}, state.debtMap, {\n              [id]: {\n                debts: [action.payload]\n              }\n            })\n          });\n        }\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/damiansandhu-franceschi/Desktop/HowMuchDoIOweYou/src/reducers/reducer.js"],"names":["actionConst","checkForDebtInstance","reducer","state","action","type","addDebtInstance","debtList","payload","key","debtMap","debts","deleteDebt","id","userIDOne","userIDTwo","slice","index","deleteUser","newUserMap","emails","forEach","email","users","filter","deleteDebtMap","newDebtMap","debt","clearData","addUser","addDebt"],"mappings":"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","sourcesContent":["import * as actionConst from \"../actions/action-constants\";\n\nimport { checkForDebtInstance } from \"../utils\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionConst.addDebtInstance: {\n      return {\n        ...state,\n        debtList: [...state.debtList, action.payload.key],\n        debtMap: {\n          ...state.debtMap,\n          [action.payload.key]: {\n            debts: action.payload.debts\n          }\n        }\n      };\n    }\n    case actionConst.deleteDebt: {\n      let id = action.payload.userIDOne + action.payload.userIDTwo;\n      return {\n        ...state,\n        debtMap: {\n          ...state.debtMap,\n          [id]: {\n            debts: [\n              ...state.debtMap[id].debts.slice(0, action.payload.index),\n              ...state.debtMap[id].debts.slice(action.payload.index + 1)\n            ]\n          }\n        }\n      };\n    }\n    case actionConst.deleteUser: {\n      let newUserMap = {};\n      state.emails.forEach(email => {\n        if (email !== action.payload.email) {\n          newUserMap[email] = state.users[email];\n        }\n      });\n      return {\n        ...state,\n        emails: state.emails.filter(email => email !== action.payload.email),\n        users: newUserMap\n      };\n    }\n    case actionConst.deleteDebtMap: {\n      let id = action.payload.userIDOne + action.payload.userIDTwo;\n      let newDebtMap = {};\n      state.debtList.forEach(debt => {\n        if (debt !== id) {\n          newDebtMap[debt] = state.debtMap[debt];\n        }\n      });\n      return {\n        ...state,\n        debtList: state.debtList.filter(debt => debt !== id),\n        debtMap: newDebtMap\n      };\n    }\n    case actionConst.clearData: {\n      return {\n        emails: [],\n        users: {},\n        debtMap: {},\n        debtList: []\n      };\n    }\n    case actionConst.addUser: {\n      return {\n        ...state,\n        emails: [...state.emails, action.email],\n        users: {\n          ...state.users,\n          [action.email]: action.payload\n        }\n      };\n    }\n    case actionConst.addDebt: {\n      let id = action.payload.userIDOne + action.payload.userIDTwo;\n\n      if (\n        checkForDebtInstance(\n          state.debtList,\n          action.payload.userIDOne,\n          action.payload.userIDTwo\n        )\n      ) {\n        return {\n          ...state,\n          debtMap: {\n            ...state.debtMap,\n            [id]: {\n              debts: [...state.debtMap[id].debts, action.payload]\n            }\n          }\n        };\n      } else {\n        return {\n          ...state,\n          debtList: [...state.debtList, id],\n          debtMap: {\n            ...state.debtMap,\n            [id]: {\n              debts: [action.payload]\n            }\n          }\n        };\n      }\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}